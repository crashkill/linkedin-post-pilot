// Script para verificar conex√£o LinkedIn e diagnosticar problemas

import { createClient } from '@supabase/supabase-js'

// Vari√°veis de ambiente (carregadas pelo Doppler)
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas')
  process.exit(1)
}

// Usar service role key para ter acesso completo
const supabase = createClient(supabaseUrl, serviceRoleKey || supabaseKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function checkLinkedInConnection() {
  try {
    console.log('üîç Verificando conex√µes LinkedIn...')
    
    // Fazer login primeiro para contornar RLS
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'fabriciocardosolima@gmail.com',
      password: '123456'
    })
    
    if (authError) {
      console.error('‚ùå Erro ao fazer login:', authError)
      return
    }
    
    console.log('‚úÖ Login realizado para verifica√ß√£o')
    
    // Verificar se existem integra√ß√µes LinkedIn
    const { data: integrations, error: integrationsError } = await supabase
      .from('linkedin_integrations')
      .select('*')
      .eq('is_active', true)
    
    if (integrationsError) {
      console.error('‚ùå Erro ao buscar integra√ß√µes:', integrationsError)
      return
    }
    
    console.log(`üìä Encontradas ${integrations?.length || 0} integra√ß√µes ativas`)
    
    if (!integrations || integrations.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma integra√ß√£o LinkedIn ativa encontrada')
      console.log('üí° Isso explica por que o post n√£o foi publicado!')
      return
    }
    
    // Verificar cada integra√ß√£o
    for (const integration of integrations) {
      console.log(`\nüîó Verificando integra√ß√£o para usu√°rio: ${integration.user_id}`)
      console.log(`üìÖ Conectado em: ${integration.connected_at}`)
      console.log(`‚è∞ Expira em: ${integration.expires_at}`)
      
      // Verificar se o token expirou
      const now = new Date()
      const expiresAt = new Date(integration.expires_at)
      
      if (expiresAt <= now) {
        console.log('‚ùå Token expirado!')
        continue
      }
      
      console.log('‚úÖ Token ainda v√°lido')
      
      // Testar conex√£o com LinkedIn API
      try {
        const response = await fetch('https://api.linkedin.com/v2/people/~', {
          headers: {
            'Authorization': `Bearer ${integration.access_token}`,
            'Content-Type': 'application/json'
          }
        })
        
        if (response.ok) {
          const profile = await response.json()
          console.log('‚úÖ Conex√£o com LinkedIn API funcionando')
          console.log(`üë§ Perfil: ${profile.localizedFirstName} ${profile.localizedLastName}`)
        } else {
          console.log('‚ùå Falha na conex√£o com LinkedIn API')
          console.log(`Status: ${response.status}`)
          const errorText = await response.text()
          console.log(`Erro: ${errorText}`)
        }
      } catch (apiError) {
        console.log('‚ùå Erro ao testar API LinkedIn:', apiError.message)
      }
    }
    
    // Verificar posts recentes
    console.log('\nüìù Verificando posts recentes...')
    const { data: posts, error: postsError } = await supabase
      .from('posts')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (postsError) {
      console.error('‚ùå Erro ao buscar posts:', postsError)
      return
    }
    
    console.log(`üìä Encontrados ${posts?.length || 0} posts recentes`)
    
    if (posts && posts.length > 0) {
      for (const post of posts) {
        console.log(`\nüìÑ Post: ${post.title}`)
        console.log(`üìÖ Criado: ${post.created_at}`)
        console.log(`üìä Status: ${post.status}`)
        console.log(`üîó Publicado no LinkedIn: ${post.published_to_linkedin ? 'Sim' : 'N√£o'}`)
        if (post.linkedin_post_id) {
          console.log(`üÜî LinkedIn Post ID: ${post.linkedin_post_id}`)
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

// Executar verifica√ß√£o
checkLinkedInConnection()
  .then(() => {
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Erro na verifica√ß√£o:', error)
    process.exit(1)
  })