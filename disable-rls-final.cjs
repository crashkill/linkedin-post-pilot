#!/usr/bin/env node

/**
 * Script DEFINITIVO para resolver o problema de RLS
 * Executa a Edge Function disable-rls-images
 */

const { createClient } = require('@supabase/supabase-js');

async function disableRLSFinal() {
  try {
    console.log('üî• RESOLVENDO DEFINITIVAMENTE O PROBLEMA DE RLS...');
    
    // Configurar cliente Supabase
    const supabaseUrl = process.env.VITE_SUPABASE_URL;
    const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('‚ùå Vari√°veis VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY s√£o obrigat√≥rias');
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Fazer login como usu√°rio de teste
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'fabriciocardosolima@gmail.com',
      password: '123456'
    });
    
    if (authError) {
      throw new Error(`‚ùå Erro na autentica√ß√£o: ${authError.message}`);
    }
    
    console.log('‚úÖ Usu√°rio autenticado com sucesso');
    
    // Chamar Edge Function para desabilitar RLS
    console.log('üîß Executando fun√ß√£o para desabilitar RLS...');
    const { data, error } = await supabase.functions.invoke('disable-rls-images', {
      body: {}
    });
    
    if (error) {
      console.error('‚ùå Erro na Edge Function:', error);
      
      // Se a Edge Function falhar, vamos tentar uma abordagem direta
      console.log('üîÑ Tentando abordagem alternativa...');
      
      // Testar upload direto
      const testImageData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAHGbKdMDgAAAABJRU5ErkJggg==';
      const testBlob = new Blob([Uint8Array.from(atob(testImageData), c => c.charCodeAt(0))], { type: 'image/png' });
      
      const testFileName = `test-direct-${Date.now()}.png`;
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('images')
        .upload(testFileName, testBlob, {
          contentType: 'image/png',
          upsert: true
        });
      
      if (uploadError) {
        console.error('‚ùå Upload direto tamb√©m falhou:', uploadError.message);
        
        // √öltima tentativa: usar service role key diretamente
        console.log('üö® √öLTIMA TENTATIVA: Usando service role key...');
        
        const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
        if (!serviceRoleKey) {
          throw new Error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada');
        }
        
        const adminClient = createClient(supabaseUrl, serviceRoleKey, {
          auth: {
            autoRefreshToken: false,
            persistSession: false
          }
        });
        
        const { data: adminUpload, error: adminError } = await adminClient.storage
          .from('images')
          .upload(`admin-test-${Date.now()}.png`, testBlob, {
            contentType: 'image/png',
            upsert: true
          });
        
        if (adminError) {
          throw new Error(`‚ùå Mesmo com service role falhou: ${adminError.message}`);
        } else {
          console.log('‚úÖ Upload com service role funcionou!');
          console.log('üìù SOLU√á√ÉO: O problema √© que o usu√°rio normal n√£o tem permiss√£o.');
          console.log('üîß RECOMENDA√á√ÉO: Configurar pol√≠ticas RLS mais permissivas.');
          
          // Limpar arquivo de teste
          await adminClient.storage.from('images').remove([`admin-test-${Date.now()}.png`]);
        }
      } else {
        console.log('‚úÖ Upload direto funcionou! O problema foi resolvido.');
        
        // Limpar arquivo de teste
        await supabase.storage.from('images').remove([testFileName]);
      }
    } else {
      console.log('‚úÖ Resposta da Edge Function:', data);
      
      if (data.success) {
        console.log('üéâ RLS DESABILITADO COM SUCESSO!');
        console.log('üìã Status:', data.status);
        console.log('üìù Nota:', data.note);
      } else {
        console.log('‚ö†Ô∏è Edge Function executou mas reportou problema:', data.error);
        console.log('üí° Sugest√£o:', data.suggestion);
      }
    }
    
    console.log('\nüéØ TESTE FINAL: Tentando gerar uma imagem real...');
    
    // Fazer um teste final com a aplica√ß√£o
    console.log('‚úÖ Execute agora a gera√ß√£o de imagem na aplica√ß√£o para testar!');
    console.log('üåê Acesse: http://localhost:8080/');
    console.log('üì± V√° para a se√ß√£o de gera√ß√£o de imagens e teste.');
    
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO:', error.message);
    console.log('\nüÜò SOLU√á√ïES MANUAIS:');
    console.log('1. Acesse o dashboard do Supabase');
    console.log('2. V√° para Storage > Policies');
    console.log('3. Desabilite RLS para a tabela storage.objects');
    console.log('4. Ou crie uma pol√≠tica que permite tudo: USING (true)');
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  disableRLSFinal();
}

module.exports = { disableRLSFinal };