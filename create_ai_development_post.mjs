#!/usr/bin/env node

import https from 'https';

console.log('üöÄ Criando e publicando post sobre desenvolvimento com IA generativa...');

// Obter ACCESS_TOKEN do ambiente (Doppler)
const accessToken = process.env.ACCESS_TOKEN;

if (!accessToken) {
    console.error('‚ùå ACCESS_TOKEN n√£o encontrado nas vari√°veis de ambiente');
    process.exit(1);
}

console.log('‚úÖ ACCESS_TOKEN encontrado');
console.log(`üîë Token: ${accessToken.substring(0, 20)}...`);

// Fun√ß√£o para fazer requisi√ß√µes HTTPS
const makeRequest = (path, method, body = null, headers = {}) => {
    return new Promise((resolve, reject) => {
        const defaultHeaders = {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
            'X-Restli-Protocol-Version': '2.0.0',
            ...headers
        };

        if (body && method === 'POST') {
            const bodyString = JSON.stringify(body);
            defaultHeaders['Content-Length'] = Buffer.byteLength(bodyString);
        }

        const options = {
            hostname: 'api.linkedin.com',
            port: 443,
            path: path,
            method: method,
            headers: defaultHeaders
        };

        console.log(`\nüì° ${method} ${path}`);
        if (body) {
            console.log('üì§ Enviando post...');
        }

        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                console.log(`üìä Status: ${res.statusCode}`);
                
                if (res.statusCode >= 200 && res.statusCode < 300) {
                    console.log('‚úÖ SUCESSO!');
                    try {
                        const parsed = JSON.parse(data);
                        console.log('üìÑ Resposta:', JSON.stringify(parsed, null, 2));
                        resolve({ success: true, data: parsed, status: res.statusCode });
                    } catch (e) {
                        console.log('üìÑ Resposta (texto):', data);
                        resolve({ success: true, data: data, status: res.statusCode });
                    }
                } else {
                    console.log('‚ùå FALHOU');
                    console.log(`üìÑ Erro: ${data}`);
                    resolve({ success: false, status: res.statusCode, error: data });
                }
            });
        });
        
        req.on('error', (error) => {
            console.error('‚ùå Erro na requisi√ß√£o:', error.message);
            reject(error);
        });
        
        if (body && method === 'POST') {
            req.write(JSON.stringify(body));
        }
        
        req.end();
    });
};

// Obter informa√ß√µes do usu√°rio
const getUserInfo = async () => {
    console.log('üë§ Obtendo informa√ß√µes do usu√°rio...');
    
    try {
        const result = await makeRequest('/v2/userinfo', 'GET');
        if (result.success) {
            console.log('‚úÖ Informa√ß√µes do usu√°rio obtidas!');
            console.log(`üëã Ol√°, ${result.data.name}!`);
            return result.data;
        } else {
            throw new Error('Falha ao obter informa√ß√µes do usu√°rio');
        }
    } catch (error) {
        console.error('‚ùå Erro ao obter informa√ß√µes do usu√°rio:', error.message);
        throw error;
    }
};

// Criar e publicar post sobre desenvolvimento com IA
const createAIPost = async (userInfo) => {
    console.log('\nüìù Criando post sobre desenvolvimento com IA generativa...');
    
    const postContent = `üöÄ Transformando o Desenvolvimento de Software com IA Generativa

üí° Acabei de finalizar a integra√ß√£o completa do LinkedIn Post Pilot - uma aplica√ß√£o que demonstra o poder da IA no desenvolvimento moderno!

üîß Stack Tecnol√≥gica:
‚Ä¢ React + TypeScript + Tailwind CSS
‚Ä¢ Node.js + Supabase
‚Ä¢ APIs de IA: Groq, Gemini, Hugging Face
‚Ä¢ LinkedIn API v2 + OAuth 2.0
‚Ä¢ Doppler para gerenciamento seguro de credenciais

‚ú® Funcionalidades Implementadas:
‚Ä¢ Autentica√ß√£o OAuth com LinkedIn
‚Ä¢ Gera√ß√£o de conte√∫do com m√∫ltiplas IAs
‚Ä¢ Cria√ß√£o de imagens com Flux 1 Schnell
‚Ä¢ Publica√ß√£o automatizada de posts
‚Ä¢ Interface moderna e responsiva

üéØ Principais Aprendizados:
‚Ä¢ Integra√ß√£o segura de APIs usando Doppler
‚Ä¢ Implementa√ß√£o de fluxos OAuth 2.0
‚Ä¢ Arquitetura modular com React + Supabase
‚Ä¢ Boas pr√°ticas de seguran√ßa em aplica√ß√µes web

üîÆ O futuro do desenvolvimento est√° na colabora√ß√£o entre humanos e IA. Esta aplica√ß√£o √© um exemplo pr√°tico de como podemos usar ferramentas de IA para acelerar o desenvolvimento, mantendo qualidade e seguran√ßa.

#DesenvolvimentoSoftware #IAGenerativa #React #NodeJS #LinkedIn #Inova√ß√£o #TechBrasil #Programa√ß√£o #IA #Automa√ß√£o`;
    
    const postData = {
        "author": `urn:li:person:${userInfo.sub}`,
        "lifecycleState": "PUBLISHED",
        "specificContent": {
            "com.linkedin.ugc.ShareContent": {
                "shareCommentary": {
                    "text": postContent
                },
                "shareMediaCategory": "NONE"
            }
        },
        "visibility": {
            "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
        }
    };
    
    try {
        const result = await makeRequest('/v2/ugcPosts', 'POST', postData);
        
        if (result.success) {
            console.log('üéâ POST PUBLICADO COM SUCESSO NO LINKEDIN!');
            console.log(`üìç ID do post: ${result.data.id}`);
            console.log('üîó Voc√™ pode verificar o post no seu perfil do LinkedIn!');
            return result.data;
        } else {
            console.log('‚ùå Falha na publica√ß√£o do post');
            console.log('üìÑ Detalhes do erro:', result.error);
            return null;
        }
    } catch (error) {
        console.error('üí• Erro na publica√ß√£o:', error.message);
        return null;
    }
};

// Fun√ß√£o principal
const main = async () => {
    try {
        console.log('üîç Iniciando processo de publica√ß√£o...');
        
        // 1. Obter informa√ß√µes do usu√°rio
        const userInfo = await getUserInfo();
        
        // 2. Criar e publicar post
        const postResult = await createAIPost(userInfo);
        
        // 3. Resumo final
        console.log('\nüìã RESUMO FINAL:');
        console.log('=' .repeat(60));
        
        if (postResult) {
            console.log('‚úÖ POST PUBLICADO COM SUCESSO!');
            console.log('üöÄ Seu post sobre desenvolvimento com IA est√° no ar!');
            console.log('üì± Acesse seu perfil do LinkedIn para visualizar.');
            console.log('üí¨ N√£o esque√ßa de interagir com os coment√°rios!');
            console.log('');
            console.log('üéØ Pr√≥ximos passos sugeridos:');
            console.log('‚Ä¢ Acompanhar engajamento do post');
            console.log('‚Ä¢ Responder coment√°rios');
            console.log('‚Ä¢ Criar posts sobre outros t√≥picos t√©cnicos');
            console.log('‚Ä¢ Explorar recursos de agendamento');
        } else {
            console.log('‚ö†Ô∏è FALHA NA PUBLICA√á√ÉO');
            console.log('üîß Verifique:');
            console.log('‚Ä¢ Se o ACCESS_TOKEN n√£o expirou');
            console.log('‚Ä¢ Se todos os escopos est√£o ativos');
            console.log('‚Ä¢ Se a aplica√ß√£o est√° aprovada');
        }
        
    } catch (error) {
        console.error('üí• Erro geral:', error.message);
        console.log('\nüÜò Em caso de problemas:');
        console.log('1. Verificar credenciais no Doppler');
        console.log('2. Confirmar permiss√µes no LinkedIn Developer Portal');
        console.log('3. Testar conectividade com a API');
    }
};

// Executar
main();